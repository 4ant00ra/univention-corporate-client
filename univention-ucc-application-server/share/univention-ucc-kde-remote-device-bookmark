#!/usr/bin/python
#
# UCC kde bookamrk
#  create kde bookmark to client (fish) for remote sessions
#
# Copyright 2010-2012 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import xml.dom.minidom
import tempfile
import os
import sys
import shutil
import socket

def manageClientBookmark():

	bookmarkXML = os.path.join(os.environ["HOME"], ".kde", "share", "apps", "kfileplaces", "bookmarks.xml")

	if not os.path.isfile(bookmarkXML):
		return 1

	# remove uccRemoteSessionStorage bookmark
	bookmarkDom = xml.dom.minidom.parse(bookmarkXML)
	for node in bookmarkDom.getElementsByTagName("bookmark"):
		for child in node.getElementsByTagName("ID"):
			uccId = child.childNodes[0].nodeValue
			if uccId == "uccRemoteSessionStorage":
				node.parentNode.removeChild(node)

	# add uccRemoteSessionStorage bookmark if this is a ssh session
	client = os.environ.get("SSH_CLIENT", "").split(" ")[0]
	if client:
		name = None
		try:
			name, alias, addresslist = socket.gethostbyaddr(client)
			name = name.split(".")[0]
		except:
			pass
		if not name:
			name = client
	
		# create bookmark entry
		bookmarkNode = bookmarkDom.createElement("bookmark")
		bookmarkNode.setAttribute("href", "fish://%s/run/drives/" % client)
		info = bookmarkDom.createElement("info")
		title = bookmarkDom.createElement("title")
		title.appendChild(bookmarkDom.createTextNode(name))
		metadata = bookmarkDom.createElement("metadata")
		metadata.setAttribute("owner", "http://freedesktop.org")
		bookmarkIcon = bookmarkDom.createElement("bookmark:icon")
		bookmarkIcon.setAttribute("name", "drive-removable-media-usb-pendrive")
		metadata.appendChild(bookmarkIcon)
		info.appendChild(metadata)
		metadata = bookmarkDom.createElement("metadata")
		metadata.setAttribute("owner", "http://www.kde.org")
		ID = bookmarkDom.createElement("ID")
		ID.appendChild(bookmarkDom.createTextNode("uccRemoteSessionStorage"))
		isSystemItem = bookmarkDom.createElement("isSystemItem")
		isSystemItem.appendChild(bookmarkDom.createTextNode("true"))
		OnlyInApp = bookmarkDom.createElement("OnlyInApp")
		metadata.appendChild(ID)
		metadata.appendChild(OnlyInApp)
		metadata.appendChild(isSystemItem)
		info.appendChild(metadata)
		bookmarkNode.appendChild(title)
		bookmarkNode.appendChild(info)
		a = bookmarkDom.getElementsByTagName("xbel").item(0)
		a.appendChild(bookmarkNode)
	
	# write config
	(fdtemp, fdname) = tempfile.mkstemp()
	fd = os.fdopen(fdtemp, 'w')
	fd.write(bookmarkDom.toxml())
	fd.close()
	shutil.move(fdname, bookmarkXML)

	return 0

manageClientBookmark()
