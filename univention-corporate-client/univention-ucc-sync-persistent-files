#!/usr/bin/python2.7
#
# Univention Corporate Client
#  helper script: sync persistent files to the ucc_root partition
#
# Copyright 2012 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import os, shutil, subprocess, sys
import string
import univention.config_registry
from optparse import OptionParser

p = OptionParser()
p.add_option("--sync-to-persistent", action="store_true", dest="sync_to_persistent", default=False,  help="Sync persistent date to ucc_root")
p.add_option("--sync-to-ucc", action="store_true", dest="sync_to_ucc", default=False, help="Sync persistent data to UCC")

opt, args = p.parse_args()

if opt.sync_to_persistent and opt.sync_to_ucc:
	print "You need to specify either --sync-to-persistent or --sync-to-ucc"
	sys.exit(1)

if not opt.sync_to_persistent and not opt.sync_to_ucc:
	print "You need to specify either --sync-to-persistent or --sync-to-ucc"
	sys.exit(1)

configRegistry = univention.config_registry.ConfigRegistry()
configRegistry.load()

if opt.sync_to_persistent:
	if configRegistry.has_key("ucc/persistent/files"):

		if os.path.exists("/ucc_root/persistent-files.SAVE"):
			shutil.rmtree("/ucc_root/persistent-files.SAVE", True)

		if os.path.exists("/ucc_root/persistent-files"):
			os.renames("/ucc_root/persistent-files", "/ucc_root/persistent-files.SAVE")

		if not os.path.exists("/ucc_root/persistent-files"):
			os.makedirs("/ucc_root/persistent-files")

		for i in configRegistry["ucc/persistent/files"].split(";"):
			if os.path.exists(i):
				try:
					os.makedirs("/ucc_root/persistent-files" + os.path.dirname(i))
				except:
					pass
				shutil.copy(i, "/ucc_root/persistent-files" + i)
				print "Copying", i, " to persistent storage partition"

	if configRegistry.has_key("ucc/persistent/ucr"):
		try:
			f = open("/ucc_root/persistent-ucr.conf", "w")
		except:
			print "Could not open /ucc_root/persistent-ucr.conf, exiting"
			sys.exit(1)

		for i in configRegistry["ucc/persistent/ucr"].split(";"):
			if configRegistry.has_key(i):
				f.write(i + ":" + configRegistry[i] + "\n")

if opt.sync_to_ucc:
	if os.path.exists("/ucc_root/persistent-files"):
		for (path, dirs, files) in os.walk("/ucc_root/persistent-files"):
			for i in files:
				file = path + "/" + i
				print "Copying", file, "to UCC system" 
				shutil.copy(file, file.replace("/ucc_root/persistent-files", ""))
	else:
		print "Storage directory for persistent files not found"

	if os.path.exists("/ucc_root/persistent-ucr.conf"):
		try:
			f = open("/ucc_root/persistent-ucr.conf", "r")
		except:
			print "Could not open /ucc_root/persistent-ucr.conf, exiting"
			sys.exit(1)
			
		vv = []
		for v in f.readlines():
			vv.append(string.replace(v, ':', '=', 1))
		if vv:
			univention.config_registry.handler_set( vv )
	else:
		print "Storage directory for persistent Univention Configuration Registry configuration not found"

