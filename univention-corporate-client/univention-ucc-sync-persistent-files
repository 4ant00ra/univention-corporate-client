#!/usr/bin/python2.7
#
# Univention Corporate Client
#  helper script: sync persistent files to the ucc_root partition
#
# Copyright 2012-2014 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import os, shutil, subprocess, sys
import string
import univention.config_registry
from optparse import OptionParser

p = OptionParser()
p.add_option("--sync-to-persistent", action="store_true", dest="sync_to_persistent", default=False,  help="Sync persistent date to ucc_root")
p.add_option("--sync-to-ucc", action="store_true", dest="sync_to_ucc", default=False, help="Sync persistent data to UCC")

opt, args = p.parse_args()

if opt.sync_to_persistent and opt.sync_to_ucc:
	print "You need to specify either --sync-to-persistent or --sync-to-ucc"
	sys.exit(1)

if not opt.sync_to_persistent and not opt.sync_to_ucc:
	print "You need to specify either --sync-to-persistent or --sync-to-ucc"
	sys.exit(1)

configRegistry = univention.config_registry.ConfigRegistry()
configRegistry.load()

# Helper function to copy all meta data of a file or directory
def copy_permissions(src, dest):
	s_stat = os.stat(src)
	os.chown(dest, s_stat.st_uid, s_stat.st_gid)
	shutil.copymode(src,dest)
	shutil.copystat(src,dest)
	d_stat = os.stat(dest)

# Helper function to copy the files and directory 
def copy_to_persistent_storage(src):
	l_src = string.split(src,'/')
	# Ignore first empty entry
	if l_src[0] == '':
		l_src=l_src[1:]
	for j in range(0,len(l_src)):
		s=os.path.join('/', string.join(l_src[0:j+1], '/'))
		d=os.path.join('/ucc_root/persistent-files',string.join(l_src[0:j+1], '/'))
		if os.path.isdir(s):
			if not os.path.exists(d):
				os.makedirs(d)
				copy_permissions(s,d)
		elif os.path.islink(s):
			try:
				f = open("/ucc_root/persistent-files.links", "a")
				f.write(s+"\n")
				f.write(os.readlink(s)+"\n")
			except:
				print "could not open /ucc_root/persistent-files.links"
		else:
			shutil.copy(s,d)
			copy_permissions(s,d)
	
if opt.sync_to_persistent:
	if configRegistry.has_key("ucc/persistent/files"):

		if os.path.exists("/ucc_root/persistent-files.SAVE"):
			shutil.rmtree("/ucc_root/persistent-files.SAVE", True)

		if os.path.exists("/ucc_root/persistent-files"):
			os.renames("/ucc_root/persistent-files", "/ucc_root/persistent-files.SAVE")

		if os.path.exists("/ucc_root/persistent-files.links.SAVE"):
			shutil.rmtree("/ucc_root/persistent-files.links.SAVE", True)

		if os.path.exists("/ucc_root/persistent-files.links"):
			os.renames("/ucc_root/persistent-files.links", "/ucc_root/persistent-files.links.SAVE")

		if not os.path.exists("/ucc_root/persistent-files"):
			os.makedirs("/ucc_root/persistent-files")

		for i in configRegistry["ucc/persistent/files"].split(";"):
			if os.path.exists(i):
				print "Copying", i, " to persistent storage partition"
				copy_to_persistent_storage(i)

	if configRegistry.has_key("ucc/persistent/ucr"):
		try:
			f = open("/ucc_root/persistent-ucr.conf", "w")
		except:
			print "Could not open /ucc_root/persistent-ucr.conf, exiting"
			sys.exit(1)

		for i in configRegistry["ucc/persistent/ucr"].split(";"):
			if configRegistry.has_key(i):
				f.write(i + ":" + configRegistry[i] + "\n")

if opt.sync_to_ucc:
	if os.path.exists("/ucc_root/persistent-files"):
		for (path, dirs, files) in os.walk("/ucc_root/persistent-files"):
			for d in dirs:
				r_path = string.replace(path, '/ucc_root/persistent-files', '/', 1)
				dest = os.path.join(r_path, d)
				if not os.path.exists(dest):
					os.makedirs(dest)
				src=os.path.join(path, d)
				copy_permissions(src, dest)
			for i in files:
				src = os.path.join(path, i)
				dest = string.replace(src, '/ucc_root/persistent-files', '', 1)
				print "Copying", dest, "to UCC system" 
				shutil.copy(src, dest)
				copy_permissions(src, dest)
	else:
		print "Storage directory for persistent files not found"

	if os.path.exists("/ucc_root/persistent-ucr.conf"):
		try:
			f = open("/ucc_root/persistent-ucr.conf", "r")
		except:
			print "Could not open /ucc_root/persistent-ucr.conf, exiting"
			sys.exit(1)
			
		vv = []
		for v in f.readlines():
			vv.append(string.replace(v, ':', '=', 1).strip())
		if vv:
			univention.config_registry.handler_set( vv )
	else:
		print "Storage directory for persistent Univention Configuration Registry configuration not found"

	if os.path.exists("/ucc_root/persistent-files.links"):
		try:
			f = open("/ucc_root/persistent-files.links", "r")
			while 1:
				linkname=f.readline().strip()
				if not linkname:
					break
				sourcefile=f.readline().strip()
				if not os.path.exists(linkname):
					print "creating symlink %s -> %s" % (linkname, sourcefile)
					os.symlink(sourcefile,linkname)
		except:
			print "error while processing symlinks"
