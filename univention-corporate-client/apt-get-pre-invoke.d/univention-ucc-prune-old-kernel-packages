#!/bin/bash
#
# Univention Corporate Client
#  remove old, unused kernel packages
#
# Copyright 2013-2015 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

export LC_ALL=C
export DEBIAN_FRONTEND=noninteractive

logfile="/var/log/univention/univention-ucc-prune-old-kernel-packages.log"

removeOldKernelPackages () {

	local kernel_regex="$1"
	local running_kernel="$(uname -r)"

	local pkg=""
	local pkg_ver=""
	local latest_pkg=""
	local latest_pkg_ver=""
	local kernel_packages=""
	
	# remove all $kernel_regex packages except
	# the running kernel
	for pkg in $(dpkg-query -W -f '${Package}\n' | grep "$kernel_regex" | sort -n); do
		stat="$(dpkg-query -W -f='${Status}\n' "$pkg" 2>/dev/null)"
		if [ "$stat" = "purge ok installed" -o "$stat" = "install ok installed" ]; then
			kernel_packages="$kernel_packages $pkg"
			pkg_ver="$(dpkg-query -W -f '${Version}\n' $pkg)"
			if dpkg --compare-versions "$pkg_ver" gt "$latest_pkg_ver" ; then
				latest_pkg_ver="$pkg_ver"
				latest_pkg="$pkg"
			fi
		fi
	done

	# remove kernel package
	for i in $kernel_packages; do
		# do not remove running and latest kernel
		if ! echo "$i" | grep -q "$running_kernel\|$latest_pkg"; then
			echo "removing kernel as requested in $0"
			echo "removing kernel as requested in $0" > $logfile
			date > $logfile
			dpkg -P $i 1>$logfile 2>$logfile || true
		fi
	done

}

remove=$(/usr/sbin/ucr get ucc/update/remove/old/kernel)
remove_regex=$(/usr/sbin/ucr get ucc/update/remove/old/kernel/pkgregex)

if [ -n "$remove" -a "$remove" = "true" ]; then
	if [ -z "$remove_regex" ]; then
		remove_regex="linux-image-[[:digit:]]"
	fi
	removeOldKernelPackages "$remove_regex"
fi

exit 0
