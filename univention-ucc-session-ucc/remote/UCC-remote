#!/bin/bash
#
# UCC - session script
#
# Copyright 2012 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

# force user session
if [ -e /usr/share/univention-lightdm/force-user-session ]; then
    if [ -n "$1" ]; then
		if ["$1" = "skipforce" ]; then
			echo "Session already forced"
		fi
    else
		. /usr/share/univention-lightdm/force-user-session
    fi
fi

eval "$(/usr/sbin/ucr shell)"
. /usr/share/univention-lib/all.sh

if [ -e "/var/cache/ucc/client-policy-$(hostname).txt" ]; then
	. "/var/cache/ucc/client-policy-$(hostname).txt"
fi

# check user policy for terminal server
if [ -e "/var/cache/ucc/user-policy-$USER.txt" ]; then
	usrPolAttr="univentionCorporateClientUserUccTerminalserver"
	servers=$(cat "/var/cache/ucc/user-policy-$USER.txt" | grep "$usrPolAttr" | awk -F "$usrPolAttr=" '{print $2}' | sed 's/"//g')
fi

# overwrite user policy for terminal server if ucr policy to host is present
if [ -n "$ucc_desktop" ]; then
	servers="$ucc_desktop"
fi

# get session host
minLoad=999999
for server in $servers; do
	sshOpts="-o StrictHostKeyChecking=no -o ConnectTimeout=3 -o BatchMode=yes"
	myLoad="$(ssh $sshOpts "$USER"@"$server" univention-showload 2>/dev/null)"
	if echo "$myLoad" | rgrep -q '^[0-9]+*'; then 
		if [ -n "$myLoad" -a "$myLoad" -lt "$minLoad" ]; then
			minLoad="$myLoad"
			sessionHost="$server"
		fi
	fi
done

# start session
if [ -n "$sessionHost" ]; then

	# obsolete univention-session stuff
	#export SESSION_HOST="$sessionHost"
	#export FIFOFILE=/tmp/univention-client.sock.$USER
	#export SESSION_RSH=ssh
	#export SESSION_RSH_ARGS='-X -o StrictHostKeyChecking=no -o ConnectTimeout=15 -o BatchMode=yes'
	#univention-session-client -p /usr/share/univention-ucc-session-ucc-remote/UCC-remote.Session  -f $FIFOFILE
	
	scpOptions="-o ConnectTimeout=3 -o StrictHostKeyChecking=no -o BatchMode=yes"
	sshOptions="-X -o StrictHostKeyChecking=no -o BatchMode=yes -o GSSAPIDelegateCredentials=yes"
	sshOptions="$sshOptions -o ServerAliveInterval=$ucc_session_remote_session_timeout"
	sshOptions="$sshOptions -o ConnectTimeout=$ucc_session_remote_connection_timeout"
	sessionOptions=""

	# copy env file to terminal server
	if [ -e "$HOME/.ucc-environment" ]; then
		scp $scpOptions "$HOME/.ucc-environment" "$sessionHost:~"
	fi

	# start pulseaudio and copy session cookie to terminal server
	if is_ucr_true 'ucc/session/remote/disable-sound'; then
		echo "Deactivating sound output"
	else
		killall -9 pulseaudio
		rm -f "$HOME/.pulse-cookie"
		pulseConfig="/tmp/${USER}-pulse.pa"
		echo "#!/usr/bin/pulseaudio -nF" > $pulseConfig
		echo "load-module module-native-protocol-tcp" >> $pulseConfig
		echo "load-module module-alsa-sink device=hw:0" >> $pulseConfig
		echo "load-module module-alsa-source device=hw:0" >> $pulseConfig	
		pulseaudio -D --resample-method=auto --high-priority=1 -nF $pulseConfig
		if [ -e "$HOME/.pulse-cookie" ]; then
			scp $scpOptions "$HOME/.pulse-cookie" "$sessionHost:~"
			sessionOptions="$sessionOptions -sound"
		fi
	fi
	
	# start session
	ssh $sshOptions $sessionHost $ucc_session_remote_command $sessionOptions
	if [ ! $? -eq 0 ]; then
		xmessage "Could not contact terminal server ($sessionHost) or run session script ($ucc_session_remote_command)"
	fi
	killall -9 pulseaudio
else
	xmessage "Could not find a usable terminal server, check uccTerminalServer Policy"
fi

exit 0
