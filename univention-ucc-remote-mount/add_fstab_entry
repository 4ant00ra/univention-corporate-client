#!/bin/bash

# Copyright (C) 2012-2014 Univention GmbH
#
# http://www.univention.de/
# 
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

# Debug
echo "univention-ucc-remote-mount: add_fstab_entry called: options: '$1' '$2' '$3'"|logger

# ignoe ram* and loop* devices bug #30468
blacklist="ram loop"
for i in $blacklist; do
	if [ -n "$1" ] && [[ "$1" == $i* ]]; then
		exit 0
	fi
done

. /usr/share/univention-lib/all.sh

eval "$(univention-config-registry shell)"

if ! is_ucr_true 'ucc/mount'; then
	echo "univention-ucc-remote-mount: Device mount has been disabled, exiting" | logger
	exit 0
fi

devicename=$(basename "$1")

export $(udevadm info -q env -n $1)

# ignore truecrypt devices
if [ -n "$DM_NAME" ]; then
	if [[ "$DM_NAME" == truecrypt* ]]; then
		echo "univention-ucc-remote-mount: Ignoring Truecrypt dm device" | logger
		exit 0
	fi
fi

# ignore non USB or CDROM devices
if [ "$ID_BUS" != "usb" ] && [ "${ID_TYPE}" != "cd" ]; then
	echo "univention-ucc-remote-mount: Device is not a USB or CD-ROM device" | logger
	exit 0
fi



# starting cdpinger
# speed up CDROM device
if [ "${ID_TYPE}" = "cd" ]; then
	if [ -z "$(pgrep -f -l "cdpinger $devicename")" ]; then
		# speed up device
		if [ -x "$(which eject)" ]; then
			max=72
			max="$(eject -X $devicename)"
			eject -x "$max" "$devicename" || true
		fi
		echo "univention-ucc-remote-mount: starting cdpinger for $devicename" | logger
		cdpinger $1 &
	else
		echo "univention-ucc-remote-mount: cdpinger already running for $devicename" | logger
	fi

	sleep 1
	# ignore cdroms without media
	if [ "${ID_CDROM_MEDIA}" != "1" ]; then
		echo "univention-ucc-remote-mount: no media found in cdrom $devicename, ignoring" | logger
		exit 0
	fi
fi

# ignore disk devices without a filesystem
if [ "$ID_TYPE" = "disk" -a -z "$ID_FS_TYPE" ]; then
	echo "univention-ucc-remote-mount: Device $devicename has no filesystem, ignoring" | logger
	exit 0
fi

if [ -z "$fstype" ]; then
    fstype="auto"
fi

LABEL=${ID_FS_LABEL_SAFE}

BASEDEV=$(echo $devicename | tr -d "0-9")

if [ ${BASEDEV} = "fd" ]; then
    DEVNUM=$(echo $devicename | tr -d "fd")
    LABEL="floppy${DEVNUM}"
    FIXEDDEVICE="Y"
elif [ -z ${LABEL} ]; then
    LABEL=$(echo ${ID_BUS}${ID_TYPE}-$devicename |tr " " "_")
fi

# base path
ROOT=/run/drives
# make sure the root we mount exists
if [ ! -d $ROOT ];then
	mkdir ${ROOT}
fi

# invent $MOUNTPOINT
MOUNTPOINT=$ROOT/$LABEL

mountoptions=""
filesystemoptions=""

if [ "${ID_TYPE}" != "cd" ]; then
	if is_ucr_true 'ucc/mount/sync'; then
		mountoptions="-o sync"
   	fi
fi

vfatpresent=`blkid | grep /dev/$devicename | grep 'TYPE="vfat"'`
if [ ! -z "${vfatpresent}" ]; then
   	if [ -n "$mountoptions" ]; then
		mountoptions="$mountoptions,umask=0000,iocharset=utf8"
   	else
		mountoptions="-o umask=0000,iocharset=utf8"
   	fi
fi

ntfspresent=`blkid | grep /dev/$devicename | grep 'TYPE="ntfs"'`
if [ ! -z "${ntfspresent}" ]; then
   	filesystemoptions="-t ntfs"

   	if [ -n "$mountoptions" ]; then
		mountoptions="$mountoptions,umask=0000"
   	else
		mountoptions="-o umask=0000"
   	fi
fi

if [ ! -d $MOUNTPOINT ];then
   	mkdir ${MOUNTPOINT}
fi

mount $mountoptions $filesystemoptions /dev/$devicename ${MOUNTPOINT}
echo mount $mountoptions $filesystemoptions /dev/$devicename ${MOUNTPOINT} | logger

if [ $? -ne 0 ]; then
	rmdir ${MOUNTPOINT}
fi
